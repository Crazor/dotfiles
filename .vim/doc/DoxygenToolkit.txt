*DoxygenToolkit.txt*	Simplify Doxygen documentation in C, C++
Actually five purposes have been defined :

Generates a doxygen license comment.  The tag text is configurable.

Generates a doxygen author skeleton.  The tag text is configurable.

Generates a doxygen comment skeleton for a C, C++, or Java function or class,
including @brief, @param (for each named argument), and @return.  The tag
text as well as a comment block header and footer are configurable.
(Consequently, you can have \brief, etc. if you wish, with little effort.)

Ignore code fragment placed in a block defined by #ifdef ... #endif.  The
block name must be given to the function.  All of the corresponding blocks
in all the file will be treated and placed in a new block DOX_SKIP_BLOCK (or
any other name that you have configured).  Then you have to update
PREDEFINED value in your doxygen configuration file with correct block name.
You also have to set ENABLE_PREPROCESSING to YES.

Generate a doxygen group (begining and ending). The tag text is configurable.

Use:
- Type of comments ( /// or /** ... */ ) :
  In vim, default comments are : /** ... */. But if you prefer to use ///
  Doxygen comments just add 'let g:DoxygenToolkit_commentType = "C++"'
  (without quotes) in your .vimrc file

- License :
  In vim, place the cursor on the line that will follow doxygen license
  comment.  Then, execute the command :DoxLic.  This will generate license
  comment and leave the cursor on the line just after.

- Author :
  In vim, place the cursor on the line that will follow doxygen author
  comment.  Then, execute the command :DoxAuthor.  This will generate the
  skeleton and leave the cursor just after @author tag if no variable
  define it, or just after the skeleton.

- Function / class comment :
  In vim, place the cursor on the line of the function header (or returned
  value of the function) or the class.  Then execute the command :Dox.
  This will generate the skeleton and leave the cursor after the @brief tag.

- Ignore code fragment :
  In vim, if you want to ignore all code fragment placed in a block such as :
    #ifdef DEBUG
    ...
    #endif
  You only have to execute the command :DoxUndoc(DEBUG) !

- Group :
  In vim, execute the command :DoxBlock to insert a doxygen block on the
  following line.

Limitations:
- Assumes that the function name (and the following opening parenthesis) is
  at least on the third line after current cursor position.
- Not able to update a comment block after it's been written.
- Blocks delimiters (header and footer) are only included for function
  comment.

Example:
Given:
int
  foo(char mychar,
      int myint,
      double* myarray,
      int mask = DEFAULT)
{ //...
}

Issuing the :Dox command with the cursor on the return of the function
declaration would generate

/**
* @brief
*
* @param mychar
* @param myint
* @param myarray
* @param mask
*
* @return
*/


To customize the output of the script, see the g:DoxygenToolkit_*
variables in the script's source.  These variables can be set in your
.vimrc.

For example, your .vimrc can contain:
let g:DoxygenToolkit_blockHeader="--------------------------------------------------------------------------"
let g:DoxygenToolkit_blockFooter="----------------------------------------------------------------------------"
let g:DoxygenToolkit_authorName="Mathias Lorente"
let g:DoxygenToolkit_licenseTag="My own license\<enter>"   <-- Do not forget ending "\<enter>"
let g:DoxygenToolkit_undocTag="DOXIGEN_SKIP_BLOCK"
# default use /**...*/ as comment. With this option /// comments are used.
let g:DoxygenToolkit_commentType="C++"
let g:DoxygenToolkit_briefTag_funcName = "yes"  " to include function name between briefTag_pre and briefTag_post
