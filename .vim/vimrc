"Vundle {{{

"Nicht VI-kompatibel sein (wozu auch?)
set nocompatible

filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
"}}}

"Plugins {{{
Plugin 'airblade/vim-gitgutter'
Plugin 'camelcasemotion'
Plugin 'christoomey/vim-tmux-navigator'
"Plugin 'davidhalter/jedi-vim'
Plugin 'DoxygenToolkit.vim'
Plugin 'gmarik/vundle'
Plugin 'godlygeek/tabular'
Plugin 'gregsexton/gitv'
Plugin 'joonty/vdebug'
Plugin 'junegunn/vim-easy-align'
Plugin 'kien/ctrlp.vim'
Plugin 'Konfekt/FastFold'
Plugin 'Lokaltog/vim-easymotion'
"Plugin 'majutsushi/tagbar'
Plugin 'Match-Bracket-for-Objective-C'
Plugin 'mattboehm/vim-accordion'
Plugin 'maralla/completor.vim'
Plugin 'mbbill/undotree'
Plugin 'mileszs/ack.vim'
Plugin 'msanders/cocoa.vim'
Plugin 'Raimondi/delimitMate'
Plugin 'ReplaceWithRegister'
Plugin 'rizzatti/dash.vim'
Plugin 'rizzatti/funcoo.vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'sheerun/vim-polyglot'
"Plugin 'ShowMarks'
Plugin 'skywind3000/asyncrun.vim'
Plugin 'sukima/xmledit'
Plugin 'TaDaa/vimade'
Plugin 'tcd.vim'
Plugin 'tmhedberg/SimpylFold'
Plugin 'tmux-plugins/vim-tmux'
Plugin 'tommcdo/vim-lion'
Plugin 'tpope/vim-abolish'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-eunuch'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-obsession'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-rhubarb'
Plugin 'tpope/vim-rsi'
"Plugin 'tpope/vim-sleuth'
Plugin 'tpope/vim-speeddating'
Plugin 'tpope/vim-surround'
"Plugin 'tpope/vim-vinegar'
Plugin 'Valloric/ListToggle'
Plugin 'VHDL-indent-93-syntax'
Plugin 'Vimjas/vim-python-pep8-indent'
Plugin 'VisIncr'
Plugin 'wincent/ferret'
Plugin 'wincent/loupe'
Plugin 'wincent/scalpel'
Plugin 'wincent/terminus'
Plugin 'xolox/vim-easytags'
Plugin 'xolox/vim-misc'
Plugin 'xu-cheng/brew.vim'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'YankRing.vim'
Plugin 'ZoomWin'

Plugin 'derekwyatt/vim-fswitch'
nnoremap <silent> <Leader>of :FSHere<cr>
nnoremap <silent> <Leader>ol :FSRight<cr>
nnoremap <silent> <Leader>oL :FSSplitRight<cr>
nnoremap <silent> <Leader>oh :FSLeft<cr>
nnoremap <silent> <Leader>oH :FSSplitLeft<cr>
nnoremap <silent> <Leader>ok :FSAbove<cr>
nnoremap <silent> <Leader>oK :FSSplitAbove<cr>
nnoremap <silent> <Leader>oj :FSBelow<cr>
nnoremap <silent> <Leader>oJ :FSSplitBelow<cr>

Plugin 'mattboehm/vim-unstack'
let g:unstack_layout = "portrait"

Plugin 'derekwyatt/vim-protodef'
let protodefprotogetter=$VIM.'bundles/protodef/pullproto.pl'
let disable_protodef_sorting=1

"Plugin 'ervandew/supertab'
"	let g:SuperTabDefaultCompletionType = "<c-n>"

Plugin 'haya14busa/incsearch.vim'
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

Plugin 'vim-airline/vim-airline'
let g:airline_powerline_fonts = 1
Plugin 'vim-airline/vim-airline-themes'

Plugin 'edkolev/promptline.vim'
let g:airline#extensions#tabline#enabled = 1

Plugin 'edkolev/tmuxline.vim'
let g:airline#extensions#tmuxline#enabled = 1

Plugin 'vimwiki/vimwiki'
let g:vimwiki_list = 	[{'path': '~/vimwiki/certus', 'path_html': '~/mnt/fileserver/IT/Dokumentation/', 'auto_export': 1, 'auto_toc': 1, 'maxhi': 1 },
						\{'path': '~/vimwiki/crazor', 'maxhi': 1 }]

"Colorscheme
Plugin 'altercation/vim-colors-solarized'
set termguicolors
"let g:solarized_termtrans=1
syntax enable
set background=light
"let g:solarized_termcolors=256
colorscheme solarized
set cursorline
"}}}

"Grundlegende Konfiguration {{{
"Dateityperkennung
filetype plugin indent on

"Keine Warntöne
set visualbell t_vb=

"Deutsch =)
set helplang=de

"Verzeichnis für viminfo
set viminfo+=!
set viminfo+=n~/.vim/.viminfo

"Erlaube Verstecken von nicht gespeicherten Buffern
set hidden

"Syntax Highlighting
syntax enable

"Wildmenu (Vervollständigung)
set wildmenu

"Unvollständige Kommandos anzeigen
set showcmd

"History-Größe
set history=100

"Fenster rechts und unten öffnen
set splitright
set splitbelow

"Durchgehender Strich zwischen Splits
set fillchars=vert:┃

"minimale Fenstergröße
set winminheight=0
set winminwidth=0

"Änderungen an .vimrc beim Speichern übernehmen
augroup reload_vimrc
	autocmd!
	autocmd bufwritepost $MYVIMRC nested source $MYVIMRC
augroup END

"Bei :make usw. automatisch speichern
set autowrite

"Zeilennummern
set number
"relative Zeilennummern
set relativenumber
" ^ Die Kombination aus 'nu' und 'rnu' zeigt die absolute Zeilennummer in der
" aktuellen Zeile an

"Cursorposition anzeigen
set ruler

"Zeilenumbruch
set linebreak
				"8 Maskierte Leerzeichen =)
set showbreak=\ \ \ \ \ \ \ \ 
set cpoptions+=n

"list mode schöner machen
set listchars=tab:>-

"Backspace reparieren
set backspace=indent,eol,start

"Wrapping für Cursor
set whichwrap=b,s,<,>,[,]

"Rand für Umbruch
"set colorcolumn=81

"Passende Klammer anzeigen
set showmatch

"Buffer in anderen Tabs wiederverwenden
set switchbuf=usetab

"Letzte Zeile möglichst vollständig anzeigen
set display=lastline

"Zeilen bis zum Bildschirmrand
set scrolloff=3

"Folding
set foldenable
set foldmethod=marker

"Indentation
set shiftwidth=4
set tabstop=4
set smarttab
set autoindent
set smartindent

"Search options
set ignorecase
set smartcase
set incsearch
set hlsearch

"J ein wenig Benehmen beibringen
set nojoinspaces

"Kommentarzeichen beim Join entfernen
set formatoptions+=j

"Immer Statuszeile anzeigen
set laststatus=2

"Macros beschleunigen
set lazyredraw

"System-Zwischenablage verwenden
set clipboard=unnamed

"Persistant Undo
silent !mkdir -p ~/.vim/undo
set undodir=~/.vim/undo
set undofile

"NetRW
let g:netrw_liststyle=3 "Tree style listing

"Vimpager
"let g:vimpager.passthrough=0

"Leader
let mapleader = ","
"}}}

"Autocommands {{{
"Automatisch an die letzte Cursorposition springen
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif

"Splits neu aufteilen bei Änderung der Fenstergröße
autocmd VimResized * execute "normal! \<C-w>="

"Omnicompletion
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete

"Highlighting
autocmd BufNewFile,BufReadPost *.ino,*.pde set filetype=cpp

"Whitespaces am Ende einer Zeile anzeigen und löschen
autocmd InsertEnter * syn clear EOLWS | syn match EOLWS excludenl /\s\+\%#\@!$/
autocmd InsertLeave * syn clear EOLWS | syn match EOLWS excludenl /\s\+$/
highlight EOLWS ctermbg=red guibg=red

function! <SID>StripTrailingWhitespace()
	" Preparation: save last search, and cursor position.
	let _s=@/
	let l = line(".")
	let c = col(".")
	" Do the business:
	%s/\s\+$//e
	" Clean up: restore previous search history, and cursor position
	let @/=_s
	call cursor(l, c)
endfunction
nnoremap <silent> <Leader><space> :call <SID>StripTrailingWhitespace()<CR>

"Hilfe in Tab öffnen
"augroup HelpInTabs
	"    autocmd!
"    autocmd BufEnter *.txt call HelpInNewTab()
"augroup END

function! HelpInNewTab()
	if &buftype == 'help'
		silent execute "normal \<C-W>T"
	endif
endfunction

" Suchtreffer immer in die Bildschirmmitte
nnoremap n nzz

"}}}

"MacVim {{{
function! Fu()
	set fullscreen
	set lines=200
	set columns=300
endfunction
:command! Fu call Fu()

function! Nofu()
	set nofullscreen
	set lines=25
	set columns=95
endfunction
:command! Nofu call Nofu()
"}}}

"Mappings {{{

"Leader
let mapleader = ","

"Write all
nnoremap <Leader>w :wa<cr>

"fswitch mappings
nnoremap <silent> <Leader>of :FSHere<cr>
nnoremap <silent> <Leader>ol :FSRight<cr>
nnoremap <silent> <Leader>oL :FSSplitRight<cr>
nnoremap <silent> <Leader>oh :FSLeft<cr>
nnoremap <silent> <Leader>oH :FSSplitLeft<cr>
nnoremap <silent> <Leader>ok :FSAbove<cr>
nnoremap <silent> <Leader>oK :FSSplitAbove<cr>
nnoremap <silent> <Leader>oj :FSBelow<cr>
nnoremap <silent> <Leader>oJ :FSSplitBelow<cr>

"LaTeX Umlaute
function! Texmap()
	inoremap ö "o
	inoremap ä "a
	inoremap ü "u
	inoremap Ä "A
	inoremap Ö "O
	inoremap Ü "U
	inoremap ß "s
endfunction

function! Untexmap()
	iunmap ö
	iunmap ä
	iunmap ü
	iunmap Ä
	iunmap Ö
	iunmap Ü
	iunmap ß
endfunction
:command! Tex call Texmap()
:command! Untex call Untexmap()

"Wer braucht schon den Ex-Mode?
noremap Q gq

"Synctex
noremap <Leader>r :w<CR>:silent !/Applications/Skim.app/Contents/SharedSupport/displayline <C-r>=line('.')<CR> %<.pdf %<CR>

"Edit Mappings
cnoremap $h e ~/
cnoremap $d e ~/Desktop/
cnoremap $$ e ./

"Als root schreiben
cnoremap w!! % !sudo tee % > /dev/null

"Bracketed paste mode Unterstützung
"if &term =~ "xterm.*"
"    let &t_ti = &t_ti . "\e[?2004h"
"    let &t_te = "\e[?2004l" . &t_te
"    function! XTermPasteBegin(ret)
"        set pastetoggle=<Esc>[201~
"        set paste
"        return a:ret
"    endfunction
"    noremap <expr> <Esc>[200~ XTermPasteBegin("i")
"    inoremap <expr> <Esc>[200~ XTermPasteBegin("")
"endif

noremap <Up> <C-y>
noremap <Down> <C-e>
noremap <Left> <NOP>
noremap <Right> <NOP>

"Space toggles folds
"Breaks Ctrl+F and PgDwn
"nnoremap <Space> za

"Move lines up and down
noremap <Leader>j ddp
noremap <Leader>k ddkP

"Tabs wechseln
noremap <Leader>, gT
noremap <Leader>. gt

"Manpages
runtime! ftplugin/man.vim
let g:ft_man_open_mode = 'vert'
set keywordprg=:Man

"""Command mode
cnoremap <C-a> <Home>
cnoremap <C-e> <End>

"Insert at begining of last insertion
nnoremap <Leader>i `[i

"}}}
